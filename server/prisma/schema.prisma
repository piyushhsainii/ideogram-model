generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id @default(uuid())
  name           String
  email          String       @unique
  avatar_url     String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  about          String
  provider       String
  trainingImg    String
  trainingImages String[]     @default([])
  balance        Int          @default(6)
  Payments       Payments[]
  Prompt         Prompt[]
  Reviews        Reviews[]
  Likes          Likes[]
  FalAI          FalAIModel[]
}

model Prompt {
  id        String   @id @default(uuid())
  prompt    String
  url       String
  isPublic  Boolean  @default(false)
  model     String   @default("Ideogram") //Ideogram || Flux || Custom
  Likes     Int      @default(0)
  userEmail String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userEmail], references: [email])
  likes     Likes[]
}

model Payments {
  id              String   @id @default(uuid())
  orderID         String
  paymentId       String
  tokensRecharged Boolean  @default(false)
  userEmail       String
  status          String
  Tokens          String
  method          String   @default("")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  tokensPurchased Int
  user            User     @relation(fields: [userEmail], references: [email])
}

model Reviews {
  id          String @id @default(uuid())
  userEmail   String
  review      String
  Improvement String
  user        User   @relation(fields: [userEmail], references: [email])
}

model Likes {
  id        String  @id @default(uuid())
  postID    String
  userEmail String
  url       String  @default("")
  isLiked   Boolean
  userid    User    @relation(fields: [userEmail], references: [email])
  post      Prompt  @relation(fields: [postID], references: [id])
}

model FalAIModel {
  id        String   @id @default(uuid())
  modelName String?
  requestID String   @unique
  status    String? //
  lora      String?
  isDataSet Boolean  @default(false)
  userEmail String
  useremail User     @relation(fields: [userEmail], references: [email])
  createdAt DateTime @default(now())
}
